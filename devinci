import argparse
import subprocess
import os
from colorama import init, Fore
from tabulate import tabulate

# Initialize colorama to enable cross-platform ANSI color support
init(autoreset=True)

class SetupTool:
    """A tool for setting up virtual environments, managing requirements, and more."""

    def __init__(self):
        """Constructor to set Python and pip commands."""
        self.python_cmd = "python3"
        self.pip_cmd = "pip3"

    @staticmethod
    def clear_screen():
        """Clears the terminal screen."""
        os.system('clear')

    @staticmethod
    def color_print(message, color):
        """Prints a message in the specified color."""
        print(color + message)

    def create_venv(self):
        """Creates a virtual environment."""
        self.clear_screen()
        venv_name = input("Enter the name for the virtual environment: ")
        subprocess.run([self.python_cmd, "-m", "venv", venv_name])
        self.color_print(f"Virtual environment '{venv_name}' created.", Fore.GREEN)

    def activate_venv(self, venv_name=None):
        """Activates a virtual environment."""
        if not venv_name:
            venv_name = input("Enter the name of the virtual environment to activate: ")
        activate_script = os.path.join(venv_name, "bin", "activate")
        if os.path.exists(activate_script):
            subprocess.run(["source", activate_script])
            self.color_print(f"Virtual environment '{venv_name}' activated.", Fore.GREEN)
        else:
            self.color_print(f"Virtual environment '{venv_name}' not found.", Fore.RED)

    def recreate_venv(self, venv_name=None):
        """Recreates a virtual environment."""
        if not venv_name:
            venv_name = input("Enter the name of the virtual environment to recreate: ")
        subprocess.run([self.python_cmd, "-m", "venv", "--clear", venv_name])
        self.color_print(f"Virtual environment '{venv_name}' recreated.", Fore.GREEN)

    def pip_freeze(self):
        """Dumps the pip freeze."""
        self.clear_screen()
        pip_freeze_output = subprocess.check_output([self.pip_cmd, "freeze"]).decode("utf-8")
        pip_freeze_table = tabulate([line.split('==') for line in pip_freeze_output.split('\n')[:-1]], headers=['Package', 'Version'], tablefmt='fancy_grid')
        print(pip_freeze_table)

    def reinstall_requirements(self):
        """Reinstalls all requirements from requirements.txt."""
        self.clear_screen()
        subprocess.run([self.pip_cmd, "install", "-r", "requirements.txt"])
        self.color_print("All requirements reinstalled.", Fore.GREEN)

    def run_build(self):
        """Runs build commands."""
        self.clear_screen()
        """Check if setup.py is present and build distribution packages."""
        if os.path.exists("setup.py"):
            try:
                subprocess.run([self.python_cmd, "setup.py", "bdist"])
                subprocess.run([self.python_cmd, "setup.py", "sdist"])
                subprocess.run([self.python_cmd, "setup.py", "bdist_wheel"])
                print("Distribution packages built successfully.")
            except subprocess.CalledProcessError as e:
                print(f"Error: {e.stderr}")
                print("Failed to build distribution packages.")
        else:
            print("Error: setup.py not found.")
        self.color_print("Build commands executed.", Fore.GREEN)

    def init_git(self):
        """Initializes a git repository."""
        self.clear_screen()
        subprocess.run(["git", "init"])
        self.color_print("Git initialized.", Fore.GREEN)

def main():
    """Main function to parse arguments and execute commands."""
    parser = argparse.ArgumentParser(description="Setup tools")
    parser.add_argument("--create-venv", action="store_true", help="Create a virtual environment")
    parser.add_argument("--activate-venv", nargs='?', const=None, help="Activate a virtual environment")
    parser.add_argument("--recreate-venv", nargs='?', const=None, help="Recreate a virtual environment")
    parser.add_argument("--pip-freeze", action="store_true", help="Dump pip freeze")
    parser.add_argument("--reinstall-requirements", action="store_true", help="Reinstall all requirements from requirements.txt")
    parser.add_argument("--run-build", action="store_true", help="Run build")
    parser.add_argument("--init-git", action="store_true", help="Initialize git repository")

    args = parser.parse_args()

    setup_tool = SetupTool()

    if not any(vars(args).values()):
        parser.print_help()
    else:
        if args.create_venv:
            setup_tool.create_venv()
        elif args.activate_venv:
            setup_tool.activate_venv(args.activate_venv)
        elif args.recreate_venv:
            setup_tool.recreate_venv(args.recreate_venv)
        elif args.pip_freeze:
            setup_tool.pip_freeze()
        elif args.reinstall_requirements:
            setup_tool.reinstall_requirements()
        elif args.run_build:
            setup_tool.run_build()
        elif args.init_git:
            setup_tool.init_git()

if __name__ == "__main__":
    main()

